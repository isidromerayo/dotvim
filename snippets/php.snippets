#These snippets override anything in the default tex snippets.
snippet orml
	/**
	 * @ORM\Column(type="${1:string}", length="${2}")
	 */
	protected $${3};
snippet orms
	/**
	 * @ORM\Column(type="${1:string}")
	 */
snippet orm
	/**
	 * @ORM\Column(type="${1:string}")
	 */
	protected $${2};
snippet m2m
	/**
	 * @ORM\ManyToMany(targetEntity="${1}", inversedBy="${2}")
	 * @ORM\JoinTable(name="${3}",
	 *      joinColumns={@ORM\JoinColumn(name="${4}_id", referencedColumnName="id")},
	 *      inverseJoinColumns={@ORM\JoinColumn(name="${5}_id", referencedColumnName="id")}
	 * )
	 */
snippet m2ms
	/**
	 * @ORM\ManyToMany(targetEntity="${1}", mappedBy="${2}")
	 */
snippet m21
	/**
	 * @ORM\ManyToOne(targetEntity="${1}", inversedBy="${2}", cascade={"remove"})
	 * @ORM\JoinColumn(name="${3}_id", referencedColumnName="id")
	 */
snippet 12m
	/**
	 * @ORM\OneToMany(targetEntity="${1}", mappedBy="${2}")
	 */
snippet prot
	protected $${1};
snippet ormt
	/**
	* @ORM\Table(name="${1}")
	* @ORM\Entity
	*/
snippet ormid
	/**
	 * @ORM\Id
	 * @ORM\Column(type="integer")
	 * @ORM\GeneratedValue(strategy="IDENTITY")
	 */
snippet anb
	@Assert\NotBlank()
snippet amin
	@Assert\MinLength(${1})
snippet amax
	@Assert\MaxLength(${1})
snippet atype
	@Assert\Type("${1:integer}")
snippet dni
	public function isValid($value, Constraint $constraint)
	{
	    $this->setMessage($constraint->message);
	    if (preg_match("/^(\d{1,8})([a-zA-Z]{1})$/", $value, $matches)) {
	        return $this->letra_nif($matches[1]) == strtoupper($matches[2]);
	    } else {
	        return false;
	    }
	}
	
	protected function letra_nif($dni)
	{
	    return substr("TRWAGMYFPDXBNJZSQVHLCKE", strtr($dni, "XYZ", "012")%23, 1);
	}
snippet javie
	'javierEguiluz' => array(
		'nombre' => 'Javier',
		'apellidos' => 'Eguiluz',
		'biografia' => 'Javier es el fundador de symfony.es, el sitio web más influyente de la comunidad hispana de Symfony. Programador apasionado por Symfony desde sus primeras versiones, actualmente se dedica a la formación.',
		'telefono'  => '600XXXXXX',
		'url'       => 'http://javiereguiluz.com',
		'email'     => 'javier@xxx.xx',
		'linkedin'  => 'http://www.linkedin.com/in/javiereguiluz',
		'twitter'   => 'http://www.twitter.com/javiereguiluz'
	),
snippet marcos
	'marcosLabad' => array(
		'nombre' => 'Marcos',
		'apellidos' => 'Labad',
		'biografia' => 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.',
		'telefono' => '600XXXXXX',
		'url' => 'http://www.quevidaesta.com',
		'email' => 'marcos@xxx.xx',
		'linkedin' => 'http://www.linkedin.com/in/marcoslabad',
		'twitter' => 'http://twitter.com/esmiz'
	)
snippet ch1
	$ponencia = new Ponencia();
	$ponencia->setTitulo('Instalación y puesta a punto');
	$ponencia->setDescripcion('Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.');
	$ponencia->setFecha(new \DateTime('2011-07-01'));
	$ponencia->setHora(new \DateTime('9:45:00'));
	$ponencia->setDuracion(45);
	$ponencia->setIdioma('es');
	$ponencia->setPonente(
	    $manager->merge($this->getReference('javierEguiluz'))
	);
	
	$manager->persist($ponencia);
snippet ch2
	$ponencia = new Ponencia();
	$ponencia->setTitulo('La vista. Twig');
	$ponencia->setDescripcion('Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.');
	$ponencia->setFecha(new \DateTime('2011-07-01'));
	$ponencia->setHora(new \DateTime('12:00:00'));
	$ponencia->setDuracion(60);
	$ponencia->setIdioma('es');
	$ponencia->setPonente(
	    $manager->merge($this->getReference('marcosLabad'))
	);
	
	$manager->persist($ponencia);
snippet useorm
	use Doctrine\ORM\Mapping as ORM;
snippet useassert
	use Symfony\Component\Validator\Constraints as Assert;
snippet ormrepo
	@ORM\Entity(repositoryClass="Desymfony\DesymfonyBundle\Entity\PonenteRepository")
snippet usecons
	use Symfony\Component\Validator\Constraint;
snippet useval
	use Symfony\Component\Validator\ConstraintValidator;
snippet kerfix
	new Symfony\Bundle\DoctrineFixturesBundle\DoctrineFixturesBundle(),
snippet autofix
	'Doctrine\\Common\\DataFixtures' => __DIR__.'/../vendor/doctrine-fixtures/lib',
snippet usefix
	use Doctrine\Common\DataFixtures\AbstractFixture;
	
	use Desymfony\DesymfonyBundle\Entity\Usuario,
	    Desymfony\DesymfonyBundle\Entity\Ponencia,
	    Desymfony\DesymfonyBundle\Entity\Ponente;
snippet userepo
	use Doctrine\ORM\EntityRepository;
snippet routing
	ponentes:
	    pattern: ponentes/
	    defaults: { _controller: DesymfonyBundle:Ponente:index }
snippet ormi
	/**
	* @ORM\Id
	* @ORM\Column(type="integer")
	* @ORM\GeneratedValue(strategy="IDENTITY")
	*/
snippet uniq
	@UniqueEntity(fields="email")
snippet useuniq
	use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
snippet usedni
	use Desymfony\DesymfonyBundle\Validator\DNI;
snippet userfix
	for ($i = 0; $i < 100; $i++) {
	    $usuario = new Usuario();
	    $usuario->setNombre("Antonio$i");
	    $usuario->setApellidos("García Mateo");
	    $usuario->setDNI("11111111H");
	    $usuario->setDireccion("Aquí mismo");
	    $usuario->setTelefono("666666666");
	    $usuario->setEmail("pepe$i@example.com");
	    $usuario->setPassword("patata");
	}
snippet ponentefix
	foreach ($ponentes as $referencia => $datosPonente) {
	    $ponente = new Ponente();
	
	    foreach ($datosPonente as $propiedad => $valor) {
	        $ponente->{'set'.ucfirst($propiedad)}($valor);
	    }
	
	    $this->addReference($referencia, $ponente);
	
	    $manager->persist($ponente);
	}
	
	$manager->flush();
snippet repopon
	return $this->getEntityManager()
	    ->createQuery('SELECT p FROM Desymfony\DesymfonyBundle\Entity\Ponente p ORDER BY p.nombre ASC')
	    ->getResult();
snippet usecont
	use Symfony\Bundle\FrameworkBundle\Controller\Controller;
snippet ponindex
	public function indexAction()
	{
	    $em = $this->get('doctrine')->getEntityManager();
	    $ponentes = $em->getRepository('DesymfonyBundle:Ponente')->findTodosAlfabeticamente();
	
	    return ($this->render('DesymfonyBundle:Ponente:index.html.twig', array(
	        'ponentes' => $ponentes
	    )));
	}
snippet ponente
	<?php
	
	namespace Desymfony\DesymfonyBundle\Entity;
	
	/**
	* @ORM\Table(name="ponente")
	* @ORM\Entity
	*/
	
	class Ponente
	{
	
	    /**
	     * @ORM\Id
	     * @ORM\Column(type="integer")
	     * @ORM\GeneratedValue(strategy="IDENTITY")
	     */
	    protected $id;
	
	    /**
	     * @ORM\Column(type="string")
	     */
	    protected $nombre;
	
	    /**
	     * @ORM\Column(type="string")
	     */
	    protected $apellidos;
	    
	    /**
	     * @ORM\Column(type="string")
	     */
	    protected $biografia;
	
	    /**
	     * @ORM\Column(type="string")
	     */
	    protected $telefono;
	
	    /**
	     * @ORM\Column(type="string")
	     */
	    protected $url;
	
	    /**
	     * @ORM\Column(type="string")
	     */
	    protected $email;
	
	    /**
	     * @ORM\Column(type="string")
	     */
	    protected $twitter;
	
	    /**
	     * @ORM\Column(type="string")
	     */
	    protected $linkedin;
	
	    protected $ponencias;
	
	}

